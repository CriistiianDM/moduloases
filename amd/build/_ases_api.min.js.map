{"version":3,"sources":["../src/_ases_api.js"],"names":["define","$","loading_indicator","METHODS","general_call","manager_name","function_name","parameters","method","async_call","use_loading_indicator","ok_callback","error_callback","toUpperCase","show","includes","Error","to_return","ajax","type","url","data","JSON","stringify","function","params","contentType","dataType","cache","processData","async","success","hide","Function","error","console","log","get","post"],"mappings":"AASAA,OAAM,wBAAC,CAEH,QAFG,CAGH,8BAHG,CAAD,CAKH,SAAWC,CAAX,CAAcC,CAAd,CAAkC,IAG3BC,CAAAA,CAAO,CAAG,CAAE,MAAF,CAAU,KAAV,CAHiB,CAoB7BC,CAAY,CAAG,SACXC,CADW,CACGC,CADH,CAId,IAHgCC,CAAAA,CAGhC,wDAH6C,EAG7C,CAFGC,CAEH,wDAFY,MAEZ,CAFoBC,CAEpB,2DAFuCC,CAEvC,2DADGC,CACH,wCADgBC,CAChB,wCAEDJ,CAAM,CAAGA,CAAM,CAACK,WAAP,EAAT,CAEA,GAAIH,CAAJ,CAA2B,CACvBR,CAAiB,CAACY,IAAlB,EACH,CAED,GAAI,CAACX,CAAO,CAACY,QAAR,CAAkBP,CAAlB,CAAL,CAAiC,CAC7B,KAAM,IAAIQ,CAAAA,KAAJ,YAAeR,CAAf,6BACT,CAED,GAAIS,CAAAA,CAAJ,CAEAhB,CAAC,CAACiB,IAAF,CAAO,CACHC,IAAI,CAAEX,CADH,CAEHY,GAAG,qCAAyBf,CAAzB,aAAyCA,CAAzC,YAFA,CAGHgB,IAAI,CAAEC,IAAI,CAACC,SAAL,CACF,CACIC,QAAQ,CAAElB,CADd,CAEImB,MAAM,CAAElB,CAFZ,CADE,CAHH,CASHmB,WAAW,CAAE,iCATV,CAUHC,QAAQ,CAAE,MAVP,CAWHC,KAAK,GAXF,CAYHC,WAAW,GAZR,CAaHC,KAAK,CAAErB,CAbJ,CAcHsB,OAAO,CAAE,iBAAUV,CAAV,CAAgB,CACrB,GAAIX,CAAJ,CAA2B,CACvBR,CAAiB,CAAC8B,IAAlB,EACH,CAED,GAAIrB,CAAW,WAAYsB,CAAAA,QAA3B,CAAqC,CACjCtB,CAAW,CAAEU,CAAF,CACd,CAED,GAAI,CAACZ,CAAL,CAAiB,CACbQ,CAAS,CAAGI,CACf,CAEJ,CA3BE,CA4BHa,KAAK,CAAE,eAAUb,CAAV,CAAgB,CACnB,GAAIX,CAAJ,CAA2B,CACvBR,CAAiB,CAAC8B,IAAlB,EACH,CAED,GAAIpB,CAAc,WAAYqB,CAAAA,QAA9B,CAAwC,CACpCrB,CAAc,CAAES,CAAF,CACjB,CAED,GAAI,CAACZ,CAAL,CAAiB,CACbQ,CAAS,CAAGI,CACf,CACJ,CAxCE,CAAP,EA2CA,GAAI,CAACZ,CAAL,CAAiB,CACb,MAAOQ,CAAAA,CACV,CAEJ,CArFgC,CA2GjCkB,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAEA,MAAO,CACHC,GAAG,CAvBG,QAANA,CAAAA,GAAM,CACFhC,CADE,CACYC,CADZ,CAGL,IAFgCC,CAAAA,CAEhC,wDAF6C,EAE7C,CAFiDE,CAEjD,2DADGC,CACH,2DADkCC,CAClC,wCAD+CC,CAC/C,wCACD,MAAOR,CAAAA,CAAY,CACfC,CADe,CACDC,CADC,CACcC,CADd,CAC0B,KAD1B,CAEfE,CAFe,CAEHC,CAFG,CAEoBC,CAFpB,CAEiCC,CAFjC,CAItB,CAcM,CAEH0B,IAAI,CAdG,QAAPA,CAAAA,IAAO,CACHjC,CADG,CACWC,CADX,CAGN,IAFgCC,CAAAA,CAEhC,wDAF6C,EAE7C,CAFiDE,CAEjD,2DADGC,CACH,2DADkCC,CAClC,wCAD+CC,CAC/C,wCACD,MAAOR,CAAAA,CAAY,CACfC,CADe,CACDC,CADC,CACcC,CADd,CAC0B,MAD1B,CAEfE,CAFe,CAEHC,CAFG,CAEoBC,CAFpB,CAEiCC,CAFjC,CAItB,CAIM,CAIV,CAtHK,CAAN","sourcesContent":["/**\r\n * @package     block_ases\r\n * @author      Jeison Cardona GÃ³mez - <jeison.cardona@correounivalle.edu.co>\r\n * @copyright   2019\r\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n * @module      block_ases/_ases_api\r\n */\r\n\r\n\r\ndefine([\r\n    \r\n    'jquery',\r\n    'block_ases/loading_indicator'\r\n    \r\n], function ( $, loading_indicator ) {\r\n        \r\n    const MANAGER_DIR_BASE = \"../managers\";\r\n    const METHODS = [ \"POST\", \"GET\" ];\r\n\r\n    /**\r\n    * Method that allow make Ajax requests to ASES's managers.\r\n    * \r\n    * @param {string} manager_name [description]\r\n    * @param {string} function_name [description]\r\n    * @param {array}  parameters    [description]\r\n    * @param {string}  method    [description]\r\n    * @param {bool}  async_call    [description]\r\n    * @param {bool}  use_loading_indicator    [description]\r\n    * @param {Function}  ok_callback    [description]\r\n    * @param {Function}  error_callback    [description]\r\n    * \r\n    * @return {array}  parameters    [description]\r\n    * \r\n    **/\r\n    let general_call = (\r\n            manager_name, function_name, parameters = [], \r\n            method = \"POST\", async_call = true, use_loading_indicator = false, \r\n            ok_callback, error_callback\r\n    ) => {\r\n        \r\n        method = method.toUpperCase();                                          // Normalization of method name.\r\n\r\n        if( use_loading_indicator ){                                            // Check if can be user loading indicator.\r\n            loading_indicator.show();                                           // Display a loading indication in the screen.\r\n        }\r\n        \r\n        if( !METHODS.includes( method ) ){                                      // Check if the given method is valid.\r\n            throw new Error( `'${method}' is not a valid method.` );            // Throw if the given method is invalid.\r\n        }\r\n                \r\n        let to_return;                                                          // If is not an async call, in this variable will be stored the request response.\r\n                \r\n        $.ajax({                                                                // jQuery AJAX request.\r\n            type: method,\r\n            url: `${MANAGER_DIR_BASE}/${manager_name}/${manager_name}_api.php`, // Manager API location.\r\n            data: JSON.stringify(\r\n                { \r\n                    function: function_name,                                    // Function name to call in API.\r\n                    params: parameters                                          // Function parameters.\r\n                }\r\n            ),\r\n            contentType: \"application/json; charset=utf-8\",\r\n            dataType: \"json\",\r\n            cache: false,\r\n            processData: false,                                                 // Preventing default data parse behavior.\r\n            async: async_call,\r\n            success: function (data) {\r\n                if( use_loading_indicator ){\r\n                    loading_indicator.hide();\r\n                }\r\n                \r\n                if (ok_callback instanceof Function) {                          // Check if exist a callback for a success response.\r\n                    ok_callback( data );                                        // Callback execution.\r\n                }\r\n                \r\n                if( !async_call ){\r\n                    to_return = data;                                           // Asignation of response to return var. \r\n                }\r\n                \r\n            },\r\n            error: function (data) {\r\n                if( use_loading_indicator ){\r\n                    loading_indicator.hide();\r\n                }\r\n                \r\n                if (error_callback instanceof Function) {\r\n                    error_callback( data );\r\n                }\r\n                \r\n                if( !async_call ){\r\n                    to_return = data;\r\n                }\r\n            }\r\n        });\r\n        \r\n        if( !async_call ){\r\n            return to_return;\r\n        }\r\n        \r\n    };\r\n    \r\n    let get = (\r\n            manager_name, function_name, parameters = [], async_call = true,    // Short function to GET method.\r\n            use_loading_indicator = false, ok_callback, error_callback\r\n    ) => {\r\n        return general_call( \r\n            manager_name, function_name, parameters, \"GET\", \r\n            async_call, use_loading_indicator, ok_callback, error_callback \r\n        );\r\n    };\r\n    \r\n    let post = (                                                                // Short function to POST method.\r\n            manager_name, function_name, parameters = [], async_call = true, \r\n            use_loading_indicator = false, ok_callback, error_callback\r\n    ) => {\r\n        return general_call( \r\n            manager_name, function_name, parameters, \"POST\", \r\n            async_call, use_loading_indicator, ok_callback, error_callback \r\n        );\r\n    };\r\n\r\n    console.log(\"Ases API initialised\");\r\n\r\n    return {\r\n        get: get,\r\n        post: post\r\n    };\r\n});"],"file":"_ases_api.min.js"}
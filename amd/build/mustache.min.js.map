{"version":3,"sources":["../src/mustache.js"],"names":["global","factory","exports","nodeName","define","amd","Mustache","mustache","objectToString","Object","prototype","toString","isArray","Array","object","call","isFunction","typeStr","obj","escapeRegExp","string","replace","hasProperty","propName","primitiveHasOwnProperty","primitive","hasOwnProperty","regExpTest","RegExp","test","testRegExp","re","nonSpaceRe","isWhitespace","entityMap","whiteRe","spaceRe","equalsRe","curlyRe","tagRe","parseTemplate","template","tags","sections","tokens","spaces","hasTag","nonSpace","stripSpace","length","pop","openingTagRe","closingTagRe","closingCurlyRe","compileTags","tagsToCompile","split","Error","scanner","Scanner","start","type","value","chr","token","openSection","eos","pos","scanUntil","i","valueLength","charAt","push","scan","nestTokens","squashTokens","squashedTokens","lastToken","numTokens","nestedTokens","collector","section","tail","match","index","substring","search","Context","view","parentContext","cache","parent","lookup","name","context","intermediateValue","names","lookupHit","indexOf","Writer","clearCache","parse","cacheKey","join","render","partials","renderTokens","originalTemplate","buffer","symbol","renderSection","renderInverted","renderPartial","unescapedValue","escapedValue","rawValue","self","subRender","j","slice","escape","version","defaultWriter","TypeError","to_html","send","result","s"],"mappings":"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","sourcesContent":["/*!\r\n * mustache.js - Logic-less {{mustache}} templates with JavaScript\r\n * http://github.com/janl/mustache.js\r\n */\r\n\r\n/*global define: false Mustache: true*/\r\n\r\n(function defineMustache (global, factory) {\r\n  if (typeof exports === 'object' && exports && typeof exports.nodeName !== 'string') {\r\n    factory(exports); // CommonJS\r\n  } else if (typeof define === 'function' && define.amd) {\r\n    define(['exports'], factory); // AMD\r\n  } else {\r\n    global.Mustache = {};\r\n    factory(global.Mustache); // script, wsh, asp\r\n  }\r\n}(this, function mustacheFactory (mustache) {\r\n\r\n  var objectToString = Object.prototype.toString;\r\n  var isArray = Array.isArray || function isArrayPolyfill (object) {\r\n    return objectToString.call(object) === '[object Array]';\r\n  };\r\n\r\n  function isFunction (object) {\r\n    return typeof object === 'function';\r\n  }\r\n\r\n  /**\r\n   * More correct typeof string handling array\r\n   * which normally returns typeof 'object'\r\n   */\r\n  function typeStr (obj) {\r\n    return isArray(obj) ? 'array' : typeof obj;\r\n  }\r\n\r\n  function escapeRegExp (string) {\r\n    return string.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\r\n  }\r\n\r\n  /**\r\n   * Null safe way of checking whether or not an object,\r\n   * including its prototype, has a given property\r\n   */\r\n  function hasProperty (obj, propName) {\r\n    return obj != null && typeof obj === 'object' && (propName in obj);\r\n  }\r\n\r\n  /**\r\n   * Safe way of detecting whether or not the given thing is a primitive and\r\n   * whether it has the given property\r\n   */\r\n  function primitiveHasOwnProperty (primitive, propName) {  \r\n    return (\r\n      primitive != null\r\n      && typeof primitive !== 'object'\r\n      && primitive.hasOwnProperty\r\n      && primitive.hasOwnProperty(propName)\r\n    );\r\n  }\r\n\r\n  // Workaround for https://issues.apache.org/jira/browse/COUCHDB-577\r\n  // See https://github.com/janl/mustache.js/issues/189\r\n  var regExpTest = RegExp.prototype.test;\r\n  function testRegExp (re, string) {\r\n    return regExpTest.call(re, string);\r\n  }\r\n\r\n  var nonSpaceRe = /\\S/;\r\n  function isWhitespace (string) {\r\n    return !testRegExp(nonSpaceRe, string);\r\n  }\r\n\r\n  var entityMap = {\r\n    '&': '&amp;',\r\n    '<': '&lt;',\r\n    '>': '&gt;',\r\n    '\"': '&quot;',\r\n    \"'\": '&#39;',\r\n    '/': '&#x2F;',\r\n    '`': '&#x60;',\r\n    '=': '&#x3D;'\r\n  };\r\n\r\n  function escapeHtml (string) {\r\n    return String(string).replace(/[&<>\"'`=\\/]/g, function fromEntityMap (s) {\r\n      return entityMap[s];\r\n    });\r\n  }\r\n\r\n  var whiteRe = /\\s*/;\r\n  var spaceRe = /\\s+/;\r\n  var equalsRe = /\\s*=/;\r\n  var curlyRe = /\\s*\\}/;\r\n  var tagRe = /#|\\^|\\/|>|\\{|&|=|!/;\r\n\r\n  /**\r\n   * Breaks up the given `template` string into a tree of tokens. If the `tags`\r\n   * argument is given here it must be an array with two string values: the\r\n   * opening and closing tags used in the template (e.g. [ \"<%\", \"%>\" ]). Of\r\n   * course, the default is to use mustaches (i.e. mustache.tags).\r\n   *\r\n   * A token is an array with at least 4 elements. The first element is the\r\n   * mustache symbol that was used inside the tag, e.g. \"#\" or \"&\". If the tag\r\n   * did not contain a symbol (i.e. {{myValue}}) this element is \"name\". For\r\n   * all text that appears outside a symbol this element is \"text\".\r\n   *\r\n   * The second element of a token is its \"value\". For mustache tags this is\r\n   * whatever else was inside the tag besides the opening symbol. For text tokens\r\n   * this is the text itself.\r\n   *\r\n   * The third and fourth elements of the token are the start and end indices,\r\n   * respectively, of the token in the original template.\r\n   *\r\n   * Tokens that are the root node of a subtree contain two more elements: 1) an\r\n   * array of tokens in the subtree and 2) the index in the original template at\r\n   * which the closing tag for that section begins.\r\n   */\r\n  function parseTemplate (template, tags) {\r\n    if (!template)\r\n      return [];\r\n\r\n    var sections = [];     // Stack to hold section tokens\r\n    var tokens = [];       // Buffer to hold the tokens\r\n    var spaces = [];       // Indices of whitespace tokens on the current line\r\n    var hasTag = false;    // Is there a {{tag}} on the current line?\r\n    var nonSpace = false;  // Is there a non-space char on the current line?\r\n\r\n    // Strips all whitespace tokens array for the current line\r\n    // if there was a {{#tag}} on it and otherwise only space.\r\n    function stripSpace () {\r\n      if (hasTag && !nonSpace) {\r\n        while (spaces.length)\r\n          delete tokens[spaces.pop()];\r\n      } else {\r\n        spaces = [];\r\n      }\r\n\r\n      hasTag = false;\r\n      nonSpace = false;\r\n    }\r\n\r\n    var openingTagRe, closingTagRe, closingCurlyRe;\r\n    function compileTags (tagsToCompile) {\r\n      if (typeof tagsToCompile === 'string')\r\n        tagsToCompile = tagsToCompile.split(spaceRe, 2);\r\n\r\n      if (!isArray(tagsToCompile) || tagsToCompile.length !== 2)\r\n        throw new Error('Invalid tags: ' + tagsToCompile);\r\n\r\n      openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + '\\\\s*');\r\n      closingTagRe = new RegExp('\\\\s*' + escapeRegExp(tagsToCompile[1]));\r\n      closingCurlyRe = new RegExp('\\\\s*' + escapeRegExp('}' + tagsToCompile[1]));\r\n    }\r\n\r\n    compileTags(tags || mustache.tags);\r\n\r\n    var scanner = new Scanner(template);\r\n\r\n    var start, type, value, chr, token, openSection;\r\n    while (!scanner.eos()) {\r\n      start = scanner.pos;\r\n\r\n      // Match any text between tags.\r\n      value = scanner.scanUntil(openingTagRe);\r\n\r\n      if (value) {\r\n        for (var i = 0, valueLength = value.length; i < valueLength; ++i) {\r\n          chr = value.charAt(i);\r\n\r\n          if (isWhitespace(chr)) {\r\n            spaces.push(tokens.length);\r\n          } else {\r\n            nonSpace = true;\r\n          }\r\n\r\n          tokens.push([ 'text', chr, start, start + 1 ]);\r\n          start += 1;\r\n\r\n          // Check for whitespace on the current line.\r\n          if (chr === '\\n')\r\n            stripSpace();\r\n        }\r\n      }\r\n\r\n      // Match the opening tag.\r\n      if (!scanner.scan(openingTagRe))\r\n        break;\r\n\r\n      hasTag = true;\r\n\r\n      // Get the tag type.\r\n      type = scanner.scan(tagRe) || 'name';\r\n      scanner.scan(whiteRe);\r\n\r\n      // Get the tag value.\r\n      if (type === '=') {\r\n        value = scanner.scanUntil(equalsRe);\r\n        scanner.scan(equalsRe);\r\n        scanner.scanUntil(closingTagRe);\r\n      } else if (type === '{') {\r\n        value = scanner.scanUntil(closingCurlyRe);\r\n        scanner.scan(curlyRe);\r\n        scanner.scanUntil(closingTagRe);\r\n        type = '&';\r\n      } else {\r\n        value = scanner.scanUntil(closingTagRe);\r\n      }\r\n\r\n      // Match the closing tag.\r\n      if (!scanner.scan(closingTagRe))\r\n        throw new Error('Unclosed tag at ' + scanner.pos);\r\n\r\n      token = [ type, value, start, scanner.pos ];\r\n      tokens.push(token);\r\n\r\n      if (type === '#' || type === '^') {\r\n        sections.push(token);\r\n      } else if (type === '/') {\r\n        // Check section nesting.\r\n        openSection = sections.pop();\r\n\r\n        if (!openSection)\r\n          throw new Error('Unopened section \"' + value + '\" at ' + start);\r\n\r\n        if (openSection[1] !== value)\r\n          throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + start);\r\n      } else if (type === 'name' || type === '{' || type === '&') {\r\n        nonSpace = true;\r\n      } else if (type === '=') {\r\n        // Set the tags for the next time around.\r\n        compileTags(value);\r\n      }\r\n    }\r\n\r\n    // Make sure there are no open sections when we're done.\r\n    openSection = sections.pop();\r\n\r\n    if (openSection)\r\n      throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + scanner.pos);\r\n\r\n    return nestTokens(squashTokens(tokens));\r\n  }\r\n\r\n  /**\r\n   * Combines the values of consecutive text tokens in the given `tokens` array\r\n   * to a single token.\r\n   */\r\n  function squashTokens (tokens) {\r\n    var squashedTokens = [];\r\n\r\n    var token, lastToken;\r\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\r\n      token = tokens[i];\r\n\r\n      if (token) {\r\n        if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {\r\n          lastToken[1] += token[1];\r\n          lastToken[3] = token[3];\r\n        } else {\r\n          squashedTokens.push(token);\r\n          lastToken = token;\r\n        }\r\n      }\r\n    }\r\n\r\n    return squashedTokens;\r\n  }\r\n\r\n  /**\r\n   * Forms the given array of `tokens` into a nested tree structure where\r\n   * tokens that represent a section have two additional items: 1) an array of\r\n   * all tokens that appear in that section and 2) the index in the original\r\n   * template that represents the end of that section.\r\n   */\r\n  function nestTokens (tokens) {\r\n    var nestedTokens = [];\r\n    var collector = nestedTokens;\r\n    var sections = [];\r\n\r\n    var token, section;\r\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\r\n      token = tokens[i];\r\n\r\n      switch (token[0]) {\r\n        case '#':\r\n        case '^':\r\n          collector.push(token);\r\n          sections.push(token);\r\n          collector = token[4] = [];\r\n          break;\r\n        case '/':\r\n          section = sections.pop();\r\n          section[5] = token[2];\r\n          collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;\r\n          break;\r\n        default:\r\n          collector.push(token);\r\n      }\r\n    }\r\n\r\n    return nestedTokens;\r\n  }\r\n\r\n  /**\r\n   * A simple string scanner that is used by the template parser to find\r\n   * tokens in template strings.\r\n   */\r\n  function Scanner (string) {\r\n    this.string = string;\r\n    this.tail = string;\r\n    this.pos = 0;\r\n  }\r\n\r\n  /**\r\n   * Returns `true` if the tail is empty (end of string).\r\n   */\r\n  Scanner.prototype.eos = function eos () {\r\n    return this.tail === '';\r\n  };\r\n\r\n  /**\r\n   * Tries to match the given regular expression at the current position.\r\n   * Returns the matched text if it can match, the empty string otherwise.\r\n   */\r\n  Scanner.prototype.scan = function scan (re) {\r\n    var match = this.tail.match(re);\r\n\r\n    if (!match || match.index !== 0)\r\n      return '';\r\n\r\n    var string = match[0];\r\n\r\n    this.tail = this.tail.substring(string.length);\r\n    this.pos += string.length;\r\n\r\n    return string;\r\n  };\r\n\r\n  /**\r\n   * Skips all text until the given regular expression can be matched. Returns\r\n   * the skipped string, which is the entire tail if no match can be made.\r\n   */\r\n  Scanner.prototype.scanUntil = function scanUntil (re) {\r\n    var index = this.tail.search(re), match;\r\n\r\n    switch (index) {\r\n      case -1:\r\n        match = this.tail;\r\n        this.tail = '';\r\n        break;\r\n      case 0:\r\n        match = '';\r\n        break;\r\n      default:\r\n        match = this.tail.substring(0, index);\r\n        this.tail = this.tail.substring(index);\r\n    }\r\n\r\n    this.pos += match.length;\r\n\r\n    return match;\r\n  };\r\n\r\n  /**\r\n   * Represents a rendering context by wrapping a view object and\r\n   * maintaining a reference to the parent context.\r\n   */\r\n  function Context (view, parentContext) {\r\n    this.view = view;\r\n    this.cache = { '.': this.view };\r\n    this.parent = parentContext;\r\n  }\r\n\r\n  /**\r\n   * Creates a new context using the given view with this context\r\n   * as the parent.\r\n   */\r\n  Context.prototype.push = function push (view) {\r\n    return new Context(view, this);\r\n  };\r\n\r\n  /**\r\n   * Returns the value of the given name in this context, traversing\r\n   * up the context hierarchy if the value is absent in this context's view.\r\n   */\r\n  Context.prototype.lookup = function lookup (name) {\r\n    var cache = this.cache;\r\n\r\n    var value;\r\n    if (cache.hasOwnProperty(name)) {\r\n      value = cache[name];\r\n    } else {\r\n      var context = this, intermediateValue, names, index, lookupHit = false;\r\n\r\n      while (context) {\r\n        if (name.indexOf('.') > 0) {\r\n          intermediateValue = context.view;\r\n          names = name.split('.');\r\n          index = 0;\r\n\r\n          /**\r\n           * Using the dot notion path in `name`, we descend through the\r\n           * nested objects.\r\n           *\r\n           * To be certain that the lookup has been successful, we have to\r\n           * check if the last object in the path actually has the property\r\n           * we are looking for. We store the result in `lookupHit`.\r\n           *\r\n           * This is specially necessary for when the value has been set to\r\n           * `undefined` and we want to avoid looking up parent contexts.\r\n           *\r\n           * In the case where dot notation is used, we consider the lookup\r\n           * to be successful even if the last \"object\" in the path is\r\n           * not actually an object but a primitive (e.g., a string, or an\r\n           * integer), because it is sometimes useful to access a property\r\n           * of an autoboxed primitive, such as the length of a string.\r\n           **/\r\n          while (intermediateValue != null && index < names.length) {\r\n            if (index === names.length - 1)\r\n              lookupHit = (\r\n                hasProperty(intermediateValue, names[index]) \r\n                || primitiveHasOwnProperty(intermediateValue, names[index])\r\n              );\r\n\r\n            intermediateValue = intermediateValue[names[index++]];\r\n          }\r\n        } else {\r\n          intermediateValue = context.view[name];\r\n\r\n          /**\r\n           * Only checking against `hasProperty`, which always returns `false` if\r\n           * `context.view` is not an object. Deliberately omitting the check\r\n           * against `primitiveHasOwnProperty` if dot notation is not used.\r\n           *\r\n           * Consider this example:\r\n           * ```\r\n           * Mustache.render(\"The length of a football field is {{#length}}{{length}}{{/length}}.\", {length: \"100 yards\"})\r\n           * ```\r\n           *\r\n           * If we were to check also against `primitiveHasOwnProperty`, as we do\r\n           * in the dot notation case, then render call would return:\r\n           *\r\n           * \"The length of a football field is 9.\"\r\n           *\r\n           * rather than the expected:\r\n           *\r\n           * \"The length of a football field is 100 yards.\"\r\n           **/\r\n          lookupHit = hasProperty(context.view, name);\r\n        }\r\n\r\n        if (lookupHit) {\r\n          value = intermediateValue;\r\n          break;\r\n        }\r\n\r\n        context = context.parent;\r\n      }\r\n\r\n      cache[name] = value;\r\n    }\r\n\r\n    if (isFunction(value))\r\n      value = value.call(this.view);\r\n\r\n    return value;\r\n  };\r\n\r\n  /**\r\n   * A Writer knows how to take a stream of tokens and render them to a\r\n   * string, given a context. It also maintains a cache of templates to\r\n   * avoid the need to parse the same template twice.\r\n   */\r\n  function Writer () {\r\n    this.cache = {};\r\n  }\r\n\r\n  /**\r\n   * Clears all cached templates in this writer.\r\n   */\r\n  Writer.prototype.clearCache = function clearCache () {\r\n    this.cache = {};\r\n  };\r\n\r\n  /**\r\n   * Parses and caches the given `template` according to the given `tags` or\r\n   * `mustache.tags` if `tags` is omitted,  and returns the array of tokens\r\n   * that is generated from the parse.\r\n   */\r\n  Writer.prototype.parse = function parse (template, tags) {\r\n    var cache = this.cache;\r\n    var cacheKey = template + ':' + (tags || mustache.tags).join(':');\r\n    var tokens = cache[cacheKey];\r\n\r\n    if (tokens == null)\r\n      tokens = cache[cacheKey] = parseTemplate(template, tags);\r\n\r\n    return tokens;\r\n  };\r\n\r\n  /**\r\n   * High-level method that is used to render the given `template` with\r\n   * the given `view`.\r\n   *\r\n   * The optional `partials` argument may be an object that contains the\r\n   * names and templates of partials that are used in the template. It may\r\n   * also be a function that is used to load partial templates on the fly\r\n   * that takes a single argument: the name of the partial.\r\n   *\r\n   * If the optional `tags` argument is given here it must be an array with two\r\n   * string values: the opening and closing tags used in the template (e.g.\r\n   * [ \"<%\", \"%>\" ]). The default is to mustache.tags.\r\n   */\r\n  Writer.prototype.render = function render (template, view, partials, tags) {\r\n    var tokens = this.parse(template, tags);\r\n    var context = (view instanceof Context) ? view : new Context(view);\r\n    return this.renderTokens(tokens, context, partials, template, tags);\r\n  };\r\n\r\n  /**\r\n   * Low-level method that renders the given array of `tokens` using\r\n   * the given `context` and `partials`.\r\n   *\r\n   * Note: The `originalTemplate` is only ever used to extract the portion\r\n   * of the original template that was contained in a higher-order section.\r\n   * If the template doesn't use higher-order sections, this argument may\r\n   * be omitted.\r\n   */\r\n  Writer.prototype.renderTokens = function renderTokens (tokens, context, partials, originalTemplate, tags) {\r\n    var buffer = '';\r\n\r\n    var token, symbol, value;\r\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\r\n      value = undefined;\r\n      token = tokens[i];\r\n      symbol = token[0];\r\n\r\n      if (symbol === '#') value = this.renderSection(token, context, partials, originalTemplate);\r\n      else if (symbol === '^') value = this.renderInverted(token, context, partials, originalTemplate);\r\n      else if (symbol === '>') value = this.renderPartial(token, context, partials, tags);\r\n      else if (symbol === '&') value = this.unescapedValue(token, context);\r\n      else if (symbol === 'name') value = this.escapedValue(token, context);\r\n      else if (symbol === 'text') value = this.rawValue(token);\r\n\r\n      if (value !== undefined)\r\n        buffer += value;\r\n    }\r\n\r\n    return buffer;\r\n  };\r\n\r\n  Writer.prototype.renderSection = function renderSection (token, context, partials, originalTemplate) {\r\n    var self = this;\r\n    var buffer = '';\r\n    var value = context.lookup(token[1]);\r\n\r\n    // This function is used to render an arbitrary template\r\n    // in the current context by higher-order sections.\r\n    function subRender (template) {\r\n      return self.render(template, context, partials);\r\n    }\r\n\r\n    if (!value) return;\r\n\r\n    if (isArray(value)) {\r\n      for (var j = 0, valueLength = value.length; j < valueLength; ++j) {\r\n        buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate);\r\n      }\r\n    } else if (typeof value === 'object' || typeof value === 'string' || typeof value === 'number') {\r\n      buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate);\r\n    } else if (isFunction(value)) {\r\n      if (typeof originalTemplate !== 'string')\r\n        throw new Error('Cannot use higher-order sections without the original template');\r\n\r\n      // Extract the portion of the original template that the section contains.\r\n      value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);\r\n\r\n      if (value != null)\r\n        buffer += value;\r\n    } else {\r\n      buffer += this.renderTokens(token[4], context, partials, originalTemplate);\r\n    }\r\n    return buffer;\r\n  };\r\n\r\n  Writer.prototype.renderInverted = function renderInverted (token, context, partials, originalTemplate) {\r\n    var value = context.lookup(token[1]);\r\n\r\n    // Use JavaScript's definition of falsy. Include empty arrays.\r\n    // See https://github.com/janl/mustache.js/issues/186\r\n    if (!value || (isArray(value) && value.length === 0))\r\n      return this.renderTokens(token[4], context, partials, originalTemplate);\r\n  };\r\n\r\n  Writer.prototype.renderPartial = function renderPartial (token, context, partials, tags) {\r\n    if (!partials) return;\r\n\r\n    var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];\r\n    if (value != null)\r\n      return this.renderTokens(this.parse(value, tags), context, partials, value);\r\n  };\r\n\r\n  Writer.prototype.unescapedValue = function unescapedValue (token, context) {\r\n    var value = context.lookup(token[1]);\r\n    if (value != null)\r\n      return value;\r\n  };\r\n\r\n  Writer.prototype.escapedValue = function escapedValue (token, context) {\r\n    var value = context.lookup(token[1]);\r\n    if (value != null)\r\n      return mustache.escape(value);\r\n  };\r\n\r\n  Writer.prototype.rawValue = function rawValue (token) {\r\n    return token[1];\r\n  };\r\n\r\n  mustache.name = 'mustache.js';\r\n  mustache.version = '3.0.1';\r\n  mustache.tags = [ '{{', '}}' ];\r\n\r\n  // All high-level mustache.* functions use this writer.\r\n  var defaultWriter = new Writer();\r\n\r\n  /**\r\n   * Clears all cached templates in the default writer.\r\n   */\r\n  mustache.clearCache = function clearCache () {\r\n    return defaultWriter.clearCache();\r\n  };\r\n\r\n  /**\r\n   * Parses and caches the given template in the default writer and returns the\r\n   * array of tokens it contains. Doing this ahead of time avoids the need to\r\n   * parse templates on the fly as they are rendered.\r\n   */\r\n  mustache.parse = function parse (template, tags) {\r\n    return defaultWriter.parse(template, tags);\r\n  };\r\n\r\n  /**\r\n   * Renders the `template` with the given `view` and `partials` using the\r\n   * default writer. If the optional `tags` argument is given here it must be an\r\n   * array with two string values: the opening and closing tags used in the\r\n   * template (e.g. [ \"<%\", \"%>\" ]). The default is to mustache.tags.\r\n   */\r\n  mustache.render = function render (template, view, partials, tags) {\r\n    if (typeof template !== 'string') {\r\n      throw new TypeError('Invalid template! Template should be a \"string\" ' +\r\n                          'but \"' + typeStr(template) + '\" was given as the first ' +\r\n                          'argument for mustache#render(template, view, partials)');\r\n    }\r\n\r\n    return defaultWriter.render(template, view, partials, tags);\r\n  };\r\n\r\n  // This is here for backwards compatibility with 0.4.x.,\r\n  /*eslint-disable */ // eslint wants camel cased function name\r\n  mustache.to_html = function to_html (template, view, partials, send) {\r\n    /*eslint-enable*/\r\n\r\n    var result = mustache.render(template, view, partials);\r\n\r\n    if (isFunction(send)) {\r\n      send(result);\r\n    } else {\r\n      return result;\r\n    }\r\n  };\r\n\r\n  // Export the escaping function so that the user may override it.\r\n  // See https://github.com/janl/mustache.js/issues/244\r\n  mustache.escape = escapeHtml;\r\n\r\n  // Export these mainly for testing, but also for advanced usage.\r\n  mustache.Scanner = Scanner;\r\n  mustache.Context = Context;\r\n  mustache.Writer = Writer;\r\n\r\n  return mustache;\r\n}));\r\n"],"file":"mustache.min.js"}
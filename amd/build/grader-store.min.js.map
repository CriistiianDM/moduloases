{"version":3,"sources":["../src/grader-store.js"],"names":["define","g_utils","g_enums","g_service","Vue","_","sortStudents","students","sortStudentMethodType","name","sortStudentMethods","FIRST_NAME","orderBy","order","LAST_NAME","mutationsType","ADD_GRADE","DELETE_CATEGORY","ADD_ITEM","ADD_CATEGORY","ADD_GRADE_TO_STUDENT","SET_STATE","SET_GRADE","SET_GRADES","SET_CATEGORY","SET_STUDENT_SORT_METHOD","SET_SELECTED_CATEGORY_ID","SET_LEVELS","SET_ITEM","DELETE_ITEM","DELETE_GRADE","actionsType","FETCH_STATE","FILL_GRADES","FILL_GRADES_FOR_NEW_ITEM","UPDATE_GRADE","DELETE_CATEGORY_CHILDS","UPDATE_CATEGORY","ADD_PARTIAL_EXAM","UPDATE_ITEM","DELETE_ITEM_GRADES","store","state","decimalPlaces","additionalColumnsAtFirst","text","hide","additionalColumnsAtEnd","sortStudentsMethodType","sortDirection","ASC","selectedCategoryId","items","categories","grades","levels","course","fullname","maxDisplayGrade","gradeDisplayRange","mutations","itemId","delete","categoryId","categoryIndex","map","category","id","indexOf","sortMethodType","gradeId","Object","keys","forEach","studentId","student","set","gradeIds","filter","_gradeId","item","push","grade","ID","userid","studentGradeIds","payload","newItem","newCategory","category_index","newGrades","newGrade","oldGrade","values","find","itemid","finalgrade","removeInsignificantTrailZeros","console","log","newGradeIds","old","new","newSelectedId","newState","studentsDict","itemsDict","gradesDict","actions","commit","dispatch","delete_item","then","response","add_item","gradeIdsToDelete","partialExam","getters","add_partial_exam","partial_item","optional_item","childItems","categoryChildItems","childCategories","categoryChildCategories","delete_category","studentIds","rawgrademin","grademin","rawgrademax","grademax","gradeResult","itemOrderIds","update_grade","other_grades","update_category","add_category","weight","category_item","update_item","get_grader_data","getCourseId","courseLevel","selectedCategory","categoryById","itemLevel","length","categoryLevels","slice","itemsCount","studentById","studentSetSorted","studentSet","studentsCount","studentsAsesCount","is_ases","itemSet","element","object","itemOrderedNames","itemname","iteminstance","finalGradeId","idCategory","children","categoryid","Array","isArray","parent","categoryChildSize","categoryDepth","depths","depth","Math","max","apply","getCategoriesByDepth","gradesSet","gradesByItemId","passingGrades","passingGradesSet","failingGrades","failingGradesSet","nullGrades","nullGradesSet","passingGradesCount","failingGradesCount","nullGradesCount","finalGradesSet","finalPassingGradeSet","lineGraphLabel","label","number","left","range","i","getGradesByRange","lastMax","currentMax","data","weightedGrades"],"mappings":"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","sourcesContent":["define([\r\n    'block_ases/grader-utils',\r\n    'block_ases/grader-enums',\r\n    'block_ases/grader-service',\r\n    'block_ases/vendor-vue',\r\n    'block_ases/vendor-lodash'\r\n], function (g_utils, g_enums, g_service, Vue, _) {\r\n\r\n    const columnFinalGrade = {text: \"Nota final\"};\r\n    const columnStudentCode= {text: \"Código estudiante\"};\r\n    const columnStudentNames= {text: \"\", hide: true};\r\n\r\n\r\n    /**\r\n     * Return an array of students sorted\r\n     * @param sortStudentMethodType\r\n     * @param students {Array<Student>}\r\n     * @returns {function(*, *): boolean}\r\n     */\r\n    var sortStudents = function (students, sortStudentMethodType) {\r\n        switch (sortStudentMethodType.name) {\r\n            case g_enums.sortStudentMethods.FIRST_NAME:\r\n                return _.orderBy(students, ['firstname'], sortStudentMethodType.order);\r\n            case g_enums.sortStudentMethods.LAST_NAME:\r\n                return _.orderBy(students, ['lastname'], sortStudentMethodType.order);\r\n        }\r\n    };\r\n    var mutationsType = {\r\n        ADD_GRADE: 'addGrade',\r\n        DELETE_CATEGORY: 'deleteCategory',\r\n        ADD_ITEM: 'addItem',\r\n        ADD_CATEGORY: 'addCategory',\r\n        ADD_GRADE_TO_STUDENT: 'addGradeToStudent',\r\n        SET_STATE: 'setAllState',\r\n        SET_GRADE: 'setGrade',\r\n        SET_GRADES: 'setGrades',\r\n        SET_CATEGORY: 'setCategory',\r\n        SET_STUDENT_SORT_METHOD: 'setStudentSortMethod',\r\n        SET_SELECTED_CATEGORY_ID: 'setSelectedCategoryId',\r\n        SET_LEVELS: 'setLevels',\r\n        SET_ITEM: 'setItem',\r\n        DELETE_ITEM: 'deleteItem',\r\n        DELETE_GRADE: 'deleteItemGrades',\r\n    };\r\n    var actionsType = {\r\n        FETCH_STATE: 'fetchAllState',\r\n        FILL_GRADES: 'fillGrades',\r\n        FILL_GRADES_FOR_NEW_ITEM: 'fillGradesForNewItem',\r\n        UPDATE_GRADE: 'updateGrade',\r\n        DELETE_ITEM: 'deleteItem',\r\n        DELETE_CATEGORY_CHILDS: 'deleteCategoryChilds',\r\n        UPDATE_CATEGORY: 'setCategory',\r\n        ADD_ITEM: 'addItem',\r\n        ADD_PARTIAL_EXAM: 'addPartialExam',\r\n        DELETE_CATEGORY: 'deleteCategory',\r\n        ADD_CATEGORY: 'addCategory',\r\n        UPDATE_ITEM: 'setItem',\r\n        DELETE_ITEM_GRADES: 'deleteItemGrades'\r\n    };\r\n    var store = {\r\n\r\n        state : {\r\n            decimalPlaces: 2,\r\n            additionalColumnsAtFirst: [\r\n                columnStudentCode,\r\n                columnStudentNames\r\n            ],\r\n            additionalColumnsAtEnd: [\r\n                columnFinalGrade\r\n            ],\r\n            sortStudentsMethodType: {\r\n                name: g_enums.sortStudentMethods.LAST_NAME,\r\n                order: g_enums.sortDirection.ASC\r\n            },\r\n            students /*: Dict<studentId: Student> */: {},\r\n            selectedCategoryId: null,\r\n            items /*: Dict<itemId:Item> */: {},\r\n            categories /*: Array<Category> */: [],\r\n            grades /*: Dict<gradeId:Grade> */: {},\r\n            levels: [], // First level is course level, last level is item level, between\r\n            //this two levels are category levels\r\n            course: {fullname: 'Nombre completo de el curso'},\r\n            maxDisplayGrade: 5, //Used as a scale for the graphs\r\n            gradeDisplayRange: 0.5, //Used to divide the scale in the line graph\r\n        },\r\n\r\n        mutations: {\r\n            [mutationsType.DELETE_ITEM] (state, itemId) {\r\n                Vue.delete(state.items, itemId);\r\n            },\r\n            [mutationsType.DELETE_CATEGORY] (state, categoryId) {\r\n                const categoryIndex = state.categories\r\n                    .map(category => category.id)\r\n                    .indexOf(categoryId);\r\n                Vue.delete(state.categories, categoryIndex);\r\n            },\r\n            [mutationsType.SET_STUDENT_SORT_METHOD](state, sortMethodType) {\r\n                state.sortStudentsMethodType = sortMethodType;\r\n            },\r\n            [mutationsType.DELETE_GRADE] (state, gradeId) {\r\n                Object.keys(state.students).forEach( studentId => {\r\n                        const student = state.students[studentId];\r\n                        Vue.set(\r\n                            state.students[studentId],\r\n                            'gradeIds',\r\n                            student.gradeIds.filter(_gradeId => _gradeId !== gradeId)\r\n                        )\r\n                    }\r\n                );\r\n                Vue.delete(state.grades, gradeId);\r\n            },\r\n            [mutationsType.ADD_ITEM](state, item) {\r\n                Vue.set(state.items, item.id, item);\r\n            },\r\n            [mutationsType.ADD_CATEGORY](state, category) {\r\n                state.categories.push(category);\r\n            },\r\n            [mutationsType.ADD_GRADE] (state, grade) {\r\n                grade.id = g_utils.ID();\r\n                let student = state.students[grade.userid];\r\n                let studentGradeIds = student.gradeIds? student.gradeIds: [];\r\n                Vue.set(state.grades, grade.id, grade);\r\n                Vue.set(state.students[student.id], 'gradeIds', [...studentGradeIds, grade.id]);\r\n            },\r\n            [mutationsType.ADD_GRADE_TO_STUDENT] (state, payload) {\r\n                let grade = payload.grade;\r\n                let studentId = payload.studentId;\r\n                let student = state.students[studentId];\r\n                let studentGradeIds = student.gradeIds? student.gradeIds: [];\r\n                Vue.set(state.students[studentId], 'gradeIds', [...studentGradeIds, grade.id]);\r\n            },\r\n            [mutationsType.SET_ITEM] (state, newItem) {\r\n                Vue.set(state.items, newItem.id, newItem);\r\n            },\r\n            [mutationsType.SET_LEVELS] (state, levels) {\r\n                state.levels = levels;\r\n            },\r\n            [mutationsType.SET_CATEGORY] (state, newCategory) {\r\n                let category_index = state.categories.map(category => category.id).indexOf(newCategory.id);\r\n                Vue.set(state.categories, category_index, newCategory);\r\n            },\r\n            [mutationsType.SET_GRADES] (state, newGrades) {\r\n                newGrades.forEach(newGrade => {\r\n                    const oldGrade = Object.values(state.grades).find(grade =>\r\n                        grade.itemid === newGrade.itemid &&\r\n                        grade.userid === newGrade.userid);\r\n\r\n                    newGrade.finalgrade = g_utils.removeInsignificantTrailZeros(newGrade.finalgrade);\r\n\r\n                    if(oldGrade.finalgrade != newGrade.finalgrade){\r\n                        console.log(\"nel prro\")\r\n\r\n\r\n                        if(!state.grades[newGrade.id]) {\r\n                            state.grades[newGrade.id] =  newGrade;\r\n                            const studentGradeIds = state.students[oldGrade.userid].gradeIds;\r\n                            const newGradeIds =\r\n                                [...studentGradeIds.filter(gradeId => gradeId !== oldGrade.id), newGrade.id];\r\n                            state.students[newGrade.userid] = {...state.students[newGrade.userid], gradeIds: newGradeIds};\r\n                            Vue.delete(state.grades, oldGrade.id);\r\n                        }\r\n                        Vue.set(state.grades, newGrade.id, newGrade);\r\n                    }\r\n                })  ;\r\n            },\r\n            [mutationsType.SET_GRADE] (state, payload) {\r\n                let oldGrade = payload.old;\r\n                let newGrade = payload.new;\r\n                newGrade.finalgrade = g_utils.removeInsignificantTrailZeros(newGrade.finalgrade);\r\n                state.grades[newGrade.id] = newGrade;\r\n                if( oldGrade ) {\r\n                    if (oldGrade.id !== newGrade.id) {\r\n                        const studentGradeIds = state.students[oldGrade.userid].gradeIds;\r\n                        const newGradeIds =\r\n                            [...studentGradeIds.filter(gradeId => gradeId !== oldGrade.id), newGrade.id];\r\n                        state.students[oldGrade.userid] = {...state.students[oldGrade.userid], gradeIds: newGradeIds};\r\n                        Vue.delete(state.grades, oldGrade.id);\r\n                    }\r\n                }\r\n            },\r\n            [mutationsType.SET_SELECTED_CATEGORY_ID] (state, newSelectedId) {\r\n                state.selectedCategoryId = newSelectedId;\r\n            },\r\n            [mutationsType.SET_STATE] (state, newState) {\r\n                state.levels = newState.levels;\r\n                let studentsDict = {};\r\n                newState.students.forEach(student => {\r\n                    studentsDict[student.id] = student;\r\n                });\r\n                state.students = studentsDict;\r\n                let itemsDict = {};\r\n                newState.items.forEach(item => {\r\n                    itemsDict[item.id] = item;\r\n                });\r\n                state.items = itemsDict;\r\n                state.categories = newState.categories;\r\n                let gradesDict = {};\r\n                newState.grades.forEach(grade => {\r\n                    gradesDict[grade.id] = {...grade, finalgrade: g_utils.removeInsignificantTrailZeros(grade.finalgrade)};\r\n                });\r\n                state.grades = gradesDict;\r\n                state.course = newState.course;\r\n            }\r\n        },\r\n        actions: {\r\n            [actionsType.DELETE_ITEM] ({commit, dispatch, state}, itemId) {\r\n                g_service.delete_item(itemId)\r\n                    .then( response => {\r\n                        commit(mutationsType.SET_LEVELS, response.levels);\r\n                        commit(mutationsType.DELETE_ITEM, itemId);\r\n                        dispatch(actionsType.DELETE_ITEM_GRADES, itemId);\r\n                    });\r\n            },\r\n            [actionsType.ADD_ITEM] ({commit, dispatch}, item) {\r\n              g_service.add_item(item)\r\n                  .then(response => {\r\n                      commit(mutationsType.ADD_ITEM, response.item);\r\n                      commit(mutationsType.SET_LEVELS, response.levels);\r\n                      dispatch(actionsType.FILL_GRADES_FOR_NEW_ITEM, response.item);\r\n                  });\r\n            },\r\n            [actionsType.DELETE_ITEM_GRADES]({commit, state}, itemId) {\r\n                let gradeIds = Object.keys(state.grades);\r\n                let gradeIdsToDelete = [];\r\n                gradeIds.forEach(gradeId => {\r\n                    if(state.grades[gradeId].itemid === itemId) {\r\n                        gradeIdsToDelete.push(gradeId);\r\n                    }\r\n                });\r\n                gradeIdsToDelete.forEach(gradeId => {\r\n                    commit(mutationsType.DELETE_GRADE, gradeId);\r\n                });\r\n            },\r\n            [actionsType.ADD_PARTIAL_EXAM] ({commit, getters}, partialExam) {\r\n              g_service.add_partial_exam(partialExam)\r\n                  .then(response => {\r\n                      commit(mutationsType.SET_LEVELS, response.levels);\r\n                      commit(mutationsType.ADD_CATEGORY, response.category);\r\n                      commit(mutationsType.ADD_ITEM, response.partial_item);\r\n                      commit(mutationsType.ADD_ITEM, response.optional_item);\r\n                  });\r\n            },\r\n            [actionsType.DELETE_CATEGORY_CHILDS] ({commit, getters, dispatch}, categoryId) {\r\n                const childItems = getters.categoryChildItems(categoryId);\r\n                const childCategories = getters.categoryChildCategories(categoryId);\r\n                childItems.forEach(item => {\r\n                    commit(mutationsType.DELETE_ITEM, item.id);\r\n                    dispatch(actionsType.DELETE_ITEM_GRADES, item.id);\r\n                });\r\n                childCategories.forEach(category => {\r\n                   commit(mutationsType.DELETE_CATEGORY, category.id);\r\n                });\r\n\r\n            },\r\n            [actionsType.DELETE_CATEGORY] ({commit, getters, dispatch}, categoryId) {\r\n                g_service.delete_category(categoryId)\r\n                    .then(response => {\r\n                        commit(mutationsType.SET_LEVELS, response.levels);\r\n                        dispatch(actionsType.DELETE_CATEGORY_CHILDS, categoryId);\r\n                        commit(mutationsType.DELETE_CATEGORY, categoryId);\r\n\r\n                    })\r\n            },\r\n            [actionsType.FILL_GRADES_FOR_NEW_ITEM] ({commit, state, getters}, item) {\r\n                let studentIds = Object.keys(state.students);\r\n                studentIds.forEach(studentId => {\r\n                    let grade = {\r\n                        userid: studentId,\r\n                        itemid: item.id,\r\n                        finalgrade: null,\r\n                        rawgrademin: item.grademin,\r\n                        rawgrademax: item.grademax\r\n                    };\r\n                    commit(mutationsType.ADD_GRADE, grade);\r\n                });\r\n            },\r\n            /**\r\n             * When the grades are retrieved by the backend, only the grades graded are returned,\r\n             * items without grades are no returned, in the interface we need all grades for\r\n             * each student in each item, if the item is not graded, a fake grade is created and added\r\n             * in `grades` and `studentGradeIds`\r\n             * @param commit\r\n             * @param state\r\n             * @param getters\r\n             */\r\n            [actionsType.FILL_GRADES] ({ commit, state, getters }) {\r\n                let studentIds = Object.keys(state.students);\r\n                let grades = Object.values(state.grades);\r\n                studentIds.forEach(studentId => {\r\n                    for(var itemId of getters.itemOrderIds /* The grades are printed in this order*/) {\r\n                        let item = state.items[itemId];\r\n                        let gradeResult = grades.find(grade => grade.userid === studentId && grade.itemid === item.id);\r\n                        if(!gradeResult) {\r\n                            let grade = {\r\n                                userid: studentId,\r\n                                itemid: item.id,\r\n                                finalgrade: null,\r\n                                rawgrademin: item.grademin,\r\n                                rawgrademax: item.grademax\r\n                            };\r\n                            commit(mutationsType.ADD_GRADE, grade);\r\n                        } else {\r\n                            commit(mutationsType.ADD_GRADE_TO_STUDENT, {studentId: studentId, grade: gradeResult} );\r\n                        }\r\n                    }\r\n\r\n                }) ;\r\n            },\r\n            [actionsType.UPDATE_GRADE] ({commit, state}, grade) {\r\n                g_service.update_grade(grade, state.course.id)\r\n                    .then( response => {\r\n                        //commit(mutationsType.SET_GRADE, {old: grade, new: response.grade});\r\n                        commit(mutationsType.SET_GRADES, response.other_grades);\r\n                    });\r\n            },\r\n            [actionsType.UPDATE_CATEGORY]({dispatch, commit}, category) {\r\n                g_service.update_category(category)\r\n                    .then( response => {\r\n                        let category = response.category;\r\n                        let levels = response.levels;\r\n                        commit(mutationsType.SET_CATEGORY, category);\r\n                        commit(mutationsType.SET_LEVELS, levels);\r\n                    })\r\n            },\r\n            [actionsType.ADD_CATEGORY] ({commit, state, dispatch}, payload) {\r\n                g_service.add_category(payload.category, payload.weight)\r\n                    .then( response =>  {\r\n                        let category = response.category;\r\n                        let category_item = response.category_item;\r\n                        let levels = response.levels;\r\n                        commit(mutationsType.ADD_ITEM, category_item);\r\n                        commit(mutationsType.ADD_CATEGORY, category);\r\n                        commit(mutationsType.SET_LEVELS, levels);\r\n                        dispatch(actionsType.FILL_GRADES_FOR_NEW_ITEM, category_item)\r\n                    });\r\n            },\r\n            [actionsType.UPDATE_ITEM]({dispatch, commit}, item) {\r\n                g_service.update_item(item)\r\n                    .then( response => {\r\n                        //console.log(response.api_response);\r\n                        let item = response.item;\r\n                        let levels = response.levels;\r\n                        commit(mutationsType.SET_ITEM, item);\r\n                        commit(mutationsType.SET_LEVELS, levels);\r\n                        commit(mutationsType.SET_GRADES, response.other_grades);\r\n                        //console.log(item);\r\n                        //console.log(response.other_grades);\r\n                    })\r\n            },\r\n            [actionsType.FETCH_STATE] ({dispatch, commit}) {\r\n                g_service.get_grader_data(g_utils.getCourseId())\r\n                    .then( response => {\r\n                        commit(mutationsType.SET_STATE, response);\r\n                        dispatch(actionsType.FILL_GRADES);\r\n                    })\r\n            }\r\n        },\r\n        getters: {\r\n            courseLevel: (state) => {\r\n                return state.levels[0]?state.levels[0][0]: [];\r\n            },\r\n            selectedCategory: (state, getters) => {\r\n                return getters.categoryById(state.selectedCategoryId);\r\n            },\r\n            itemLevel:(state) => {\r\n                return state.levels[state.levels.length-1];\r\n            },\r\n            categoryLevels: (state) => {\r\n                let slice =  state.levels.slice(1, state.levels.length -1 );\r\n                return slice? slice: [];\r\n            },\r\n            itemsCount: (state) => {\r\n                return Object.keys(state.items).length;\r\n            },\r\n            categoryById: (state) => (id) => {\r\n                return  state.categories.find (category => category.id === id);\r\n            },\r\n            studentById: (state) => (id) => {\r\n                return  state.students[id];\r\n            },\r\n            studentSetSorted: (state, getters) => {\r\n                return  sortStudents(getters.studentSet, state.sortStudentsMethodType);\r\n            },\r\n            studentSet: (state) => {\r\n                return Object.values(state.students);\r\n            },\r\n            studentsCount: (state) => {\r\n                return Object.keys(state.students).length;\r\n            },\r\n            studentsAsesCount: (state, getters) => {\r\n                return getters.studentSet.filter(student => student.is_ases).length;\r\n            },\r\n            itemSet: (state) => {\r\n                return Object.values(state.items);\r\n            },\r\n            /**\r\n             * Use this getter newGradenewGrader item set when you should show\r\n             * or manage items ordered, in the same order than should\r\n             * have for the table\r\n             * @param state\r\n             * @param getters\r\n             * @returns {*}\r\n             */\r\n            itemOrderIds: (state, getters) => {\r\n                let itemLevel = getters.itemLevel; //see itemLevel function in getters\r\n                if(!itemLevel) {\r\n                    return Object.keys(state.items);\r\n                }\r\n                return itemLevel.map(element => element.object.id);\r\n            },\r\n            itemOrderedNames: (state, getters) => {\r\n                let itemLevel = getters.itemLevel; //see itemLevel function in getters\r\n                if(!itemLevel) {\r\n                    return Object.keys(state.items);\r\n                }\r\n                return itemLevel.map(element => {\r\n                    if(element.object.itemname === null || element.object.itemname === ''){\r\n                        return 'Total ' + getters.categoryById(element.object.iteminstance).fullname;\r\n                    }else return element.object.itemname;\r\n                });\r\n            },\r\n            finalGradeId: (state, getters) => {\r\n                return getters.itemOrderIds[getters.itemOrderIds.length - 1];\r\n            },\r\n            categoryChildItems: (state, getters) => (idCategory) => {\r\n                let children =  getters.itemSet.filter(item => {\r\n                        return item.categoryid === idCategory ||\r\n                            item.iteminstance === idCategory //\r\n                    }\r\n                );\r\n                if(Array.isArray(children)) {\r\n                    return children;\r\n                } else {\r\n                    return [];\r\n                }\r\n            },\r\n            categoryChildCategories: (state) => (idCategory) => {\r\n                let children =  state.categories.filter(category => category.parent === idCategory);\r\n                return children? children: [];\r\n            },\r\n            categoryChildSize: (state, getters) => (idCategory) => {\r\n\r\n                let categoryChildItems = getters.categoryChildItems(idCategory);\r\n                let categoryChildCategories = getters.categoryChildCategories(idCategory);\r\n                return categoryChildItems.length + categoryChildCategories.length;\r\n            },\r\n            categoryDepth: (state) => {\r\n                if(state.categories.length <= 0) {\r\n                    return 0;\r\n                }\r\n                var depths =  state.categories.map(category => { return category.depth; });\r\n                return Math.max.apply(Math,depths);\r\n\r\n            },\r\n            getCategoriesByDepth: (state) => (depth) => {\r\n                return state.categories.find(category=>category.depth === depth);\r\n            },\r\n            gradesSet: (state) => {\r\n                return Object.values(state.grades);\r\n            },\r\n            gradesByItemId: (state, getters) => (id) => {\r\n                return getters.gradesSet.filter(grade => grade.itemid === id);\r\n            },\r\n            passingGrades: (state, getters) => {\r\n                return getters.gradesSet.filter(grade => grade.finalgrade >= grade.rawgrademax*0.6);\r\n            },\r\n            passingGradesSet: (state, getters) => {\r\n                return getters.itemOrderIds.map(id => {\r\n                    return getters.gradesByItemId(id).filter(grade => grade.finalgrade >= grade.rawgrademax*0.6).length;\r\n                });\r\n            },\r\n            failingGrades: (state, getters) => {\r\n                return getters.gradesSet.filter(grade => grade.finalgrade < grade.rawgrademax*0.6 && grade.finalgrade != null);\r\n            },\r\n            failingGradesSet: (state, getters) => {\r\n                return getters.itemOrderIds.map(id => {\r\n                    return getters.gradesByItemId(id).filter(grade => {\r\n                        if(grade.finalgrade < grade.rawgrademax*0.6 && grade.finalgrade != null){\r\n                            return true;\r\n                        }else return false\r\n                    }).length;\r\n                });\r\n            },\r\n            nullGrades: (state, getters) => {\r\n                return getters.gradesSet.filter(grade => grade.finalgrade === null || grade.finalgrade === undefined);\r\n            },\r\n            nullGradesSet: (state, getters) => {\r\n                return getters.itemOrderIds.map(id => {\r\n                    return getters.gradesByItemId(id).filter(grade => grade.finalgrade === null || grade.finalgrade === undefined).length;\r\n                });\r\n            },\r\n            passingGradesCount: (state, getters) => {\r\n                return getters.passingGrades.length;\r\n            },\r\n            failingGradesCount: (state, getters) => {\r\n                return getters.failingGrades.length;\r\n            },\r\n            nullGradesCount: (state, getters) => {\r\n                return getters.nullGrades.length;\r\n            },\r\n            finalGradesSet: (state, getters) => {\r\n                return getters.gradesSet.filter(grade => grade.itemid === getters.finalGradeId);\r\n            },\r\n            finalPassingGradeSet: (state, getters) => {\r\n                return getters.finalGradesSet.filter(grade => grade.finalgrade >= grade.rawgrademax*0.6);\r\n            },\r\n            lineGraphLabel: (state) => {\r\n                let label = [];\r\n                let number = state.maxDisplayGrade/state.gradeDisplayRange;\r\n                let left = 0;\r\n                let range = '';\r\n                for(i = 0; i < number - 1; i++){\r\n                    range = left + \" - \";\r\n                    left += state.gradeDisplayRange;\r\n                    range += left - 0.1;\r\n                    label.push(range);\r\n                }\r\n                range = left + \" - \" + state.maxDisplayGrade;\r\n                label.push(range);\r\n                return label;\r\n            },\r\n            getGradesByRange: (state, getters) => {\r\n                let lastMax = 0;\r\n                let currentMax = state.gradeDisplayRange;\r\n                let data = [];\r\n                let number = state.maxDisplayGrade/state.gradeDisplayRange;\r\n                let weightedGrades = getters.finalGradesSet.map(grade => (grade.finalgrade/grade.rawgrademax)*state.maxDisplayGrade);\r\n                for(i = 0; i < number - 1; i++){\r\n                    data.push(weightedGrades.filter(grade => grade >= lastMax && grade < currentMax).length);\r\n                    lastMax += state.gradeDisplayRange;\r\n                    currentMax += state.gradeDisplayRange;\r\n                }\r\n                data.push(weightedGrades.filter(grade => grade >= lastMax).length);\r\n                return data;\r\n            }\r\n        }\r\n    };\r\n\r\n    return {\r\n        store: store,\r\n        mutations: mutationsType,\r\n        actions: actionsType\r\n    }\r\n});"],"file":"grader-store.min.js"}